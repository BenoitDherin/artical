{"version":3,"sources":["webpack:///./src/scripts/sketches/P_1_2_1_01.js"],"names":["sketch","p","tileCountX","tileCountY","colorsLeft","colorsRight","colors","interpolateShortest","shakeColors","i","color","random","preload","setup","createCanvas","colorMode","HSB","noStroke","draw","int","map","mouseX","width","mouseY","height","interCol","tileWidth","tileHeight","gridY","col1","col2","gridX","amount","RGB","lerpColor","fill","posX","posY","rect","push","mousePressed","mouseReleased","keyPressed","key","saveCanvas","Date","now","toString","keyReleased"],"mappings":"8FAkCe,SAASA,EAAOC,GAG7B,IAAIC,EAAa,EACbC,EAAa,GAEbC,EAAa,GACbC,EAAc,GACdC,EAAS,GAETC,GAAsB,EA0E1B,SAASC,IACP,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAYM,IAC9BL,EAAWK,GAAKR,EAAES,MAAMT,EAAEU,OAAO,EAAG,IAAKV,EAAEU,OAAO,EAAG,KAAM,KAC3DN,EAAYI,GAAKR,EAAES,MAAMT,EAAEU,OAAO,IAAK,KAAM,IAAKV,EAAEU,OAAO,EAAG,MA1ElEV,EAAEW,QAAU,aAKZX,EAAEY,MAAQ,WACRZ,EAAEa,aAAa,IAAK,KACpBb,EAAEc,UAAUd,EAAEe,KACdf,EAAEgB,WACFT,KAIFP,EAAEiB,KAAO,WACPhB,EAAaD,EAAEkB,IAAIlB,EAAEmB,IAAInB,EAAEoB,OAAQ,EAAGpB,EAAEqB,MAAO,EAAG,MAClDnB,EAAaF,EAAEkB,IAAIlB,EAAEmB,IAAInB,EAAEsB,OAAQ,EAAGtB,EAAEuB,OAAQ,EAAG,KACnD,IAEIC,EAFAC,EAAYzB,EAAEqB,MAAQpB,EACtByB,EAAa1B,EAAEuB,OAASrB,EAE5BG,EAAS,GAET,IAAK,IAAIsB,EAAQ,EAAGA,EAAQzB,EAAYyB,IAItC,IAHA,IAAIC,EAAOzB,EAAWwB,GAClBE,EAAOzB,EAAYuB,GAEdG,EAAQ,EAAGA,EAAQ7B,EAAY6B,IAAS,CAC/C,IAAIC,EAAS/B,EAAEmB,IAAIW,EAAO,EAAG7B,EAAa,EAAG,EAAG,GAE5CK,GAEFN,EAAEc,UAAUd,EAAEgC,KACdR,EAAWxB,EAAEiC,UAAUL,EAAMC,EAAME,GAEnC/B,EAAEc,UAAUd,EAAEe,MAEdS,EAAWxB,EAAEiC,UAAUL,EAAMC,EAAME,GAGrC/B,EAAEkC,KAAKV,GAEP,IAAIW,EAAOV,EAAYK,EACnBM,EAAOV,EAAaC,EACxB3B,EAAEqC,KAAKF,EAAMC,EAAMX,EAAWC,GAG9BrB,EAAOiC,KAAKd,KAMlBxB,EAAEuC,aAAe,aAIjBvC,EAAEwC,cAAgB,WAChBjC,KAGFP,EAAEyC,WAAa,WACA,KAATzC,EAAE0C,KAAuB,KAAT1C,EAAE0C,KAAY1C,EAAE2C,WAAWC,KAAKC,MAAMC,WAAY,OACzD,KAAT9C,EAAE0C,MAAYpC,GAAsB,GAC3B,KAATN,EAAE0C,MAAYpC,GAAsB,IAI1CN,EAAE+C,YAAc,aAjHlB","file":"18-212bece691bfbbc6a618.js","sourcesContent":["// P_1_2_1_01\n//\n// Generative Gestaltung – Creative Coding im Web\n// ISBN: 978-3-87439-902-9, First Edition, Hermann Schmidt, Mainz, 2018\n// Benedikt Groß, Hartmut Bohnacker, Julia Laub, Claudius Lazzeroni\n// with contributions by Joey Lee and Niels Poldervaart\n// Copyright 2018\n//\n// http://www.generative-gestaltung.de\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * shows how to interpolate colors in different styles/ color modes\n *\n * MOUSE\n * left click          : new random color set\n * position x          : interpolation resolution\n * position y          : row count\n *\n * KEYS\n * 1-2                 : switch interpolation style\n * s                   : save png\n * c                   : save color palette\n */\n'use strict';\n\nexport default function sketch(p) {\n\n  // ~~~~~~ Initialize variables ~~~~~~~~~\n  var tileCountX = 2;\n  var tileCountY = 10;\n  \n  var colorsLeft = [];\n  var colorsRight = [];\n  var colors = [];\n  \n  var interpolateShortest = true;\n  \n  // ~~~~~~ React lifecycle methods ~~~~~~\n  p.preload = () => {\n\n  }\n\n  // ~~~~~~ Setup ~~~~~~\n  p.setup = () => {\n    p.createCanvas(800, 800);\n    p.colorMode(p.HSB);\n    p.noStroke();\n    shakeColors();\n  }\n\n  // ~~~~~~ Draw ~~~~~~\n  p.draw = () => {\n    tileCountX = p.int(p.map(p.mouseX, 0, p.width, 2, 100));\n    tileCountY = p.int(p.map(p.mouseY, 0, p.height, 2, 10));\n    var tileWidth = p.width / tileCountX;\n    var tileHeight = p.height / tileCountY;\n    var interCol;\n    colors = [];\n  \n    for (var gridY = 0; gridY < tileCountY; gridY++) {\n      var col1 = colorsLeft[gridY];\n      var col2 = colorsRight[gridY];\n  \n      for (var gridX = 0; gridX < tileCountX; gridX++) {\n        var amount = p.map(gridX, 0, tileCountX - 1, 0, 1);\n  \n        if (interpolateShortest) {\n          // switch to rgb\n          p.colorMode(p.RGB);\n          interCol = p.lerpColor(col1, col2, amount);\n          // switch back\n          p.colorMode(p.HSB);\n        } else {\n          interCol = p.lerpColor(col1, col2, amount);\n        }\n  \n        p.fill(interCol);\n  \n        var posX = tileWidth * gridX;\n        var posY = tileHeight * gridY;\n        p.rect(posX, posY, tileWidth, tileHeight);\n  \n        // save color for potential ase export\n        colors.push(interCol);\n      }\n    }\n  }\n\n  // ~~~~~~ Other commonly used p5 methods\n  p.mousePressed = () => {\n\n  }\n\n  p.mouseReleased = () => {\n    shakeColors();\n  }\n\n  p.keyPressed = () => {\n    if (p.key == 's' || p.key == 'S') p.saveCanvas(Date.now().toString(), 'png');\n    if (p.key == '1') interpolateShortest = true;\n    if (p.key == '2') interpolateShortest = false;\n  \n  }\n\n  p.keyReleased = () => {\n    \n  }\n\n  // ~~~~~~ Helper functions ~~~~~~~~~\n  function shakeColors() {\n    for (var i = 0; i < tileCountY; i++) {\n      colorsLeft[i] = p.color(p.random(0, 60), p.random(0, 100), 100);\n      colorsRight[i] = p.color(p.random(160, 190), 100, p.random(0, 100));\n    }\n  }\n  // ~~~~~~ Classes ~~~~~~~~~~~~\n  \n}\n"],"sourceRoot":""}